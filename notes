Other features to do:
  - duplicate note

// Bringing to front
Context:
  Binding a mousedown event to .note does not interfere with any other events of sub elements.
Problem:
  Bring to front works by re-arranging the list, then rendering. However, a re-render will effectively cancel any in-flight event callbacks. This is especially apparent for drag, because it will let go of the note after render.
Possible solution:
  Either:
    Render and then try to figure out the state of the actions and recreate them
  Or:
    Don't actually re-render until everything else is done, and use z-index tricks to get it up top. The hard part is figuring out when to actually render, if at all. Maybe we should just stack z-indexes based on sort index, then preserve that state to the datastore.

Considerations:
  Bringing to front without rendering, then proceeding as usual doesn't work, because the original event.target is pointing at the wrong model once the rearranging occurs.

  In all cases, on mousedown we will artificially bring to front using z-index. Therefore there are three steps:
      -fudge z-index
      -bringToFront (save changed order to ds)
      -render

  Z-index happens immediately. Render never matters since z-index will persist until re-render, so that doesn't have to ever happen, if need be. So the only step that matters is bringToFront because it will betray the original index of the event.target. So for all cases, wait until the last possible moment, wait for all changes and animations to occur, and then bringToFront. It may be the case that bringToFront can actually trigger a render, since everything else should have happened already

  Since we don't render after bring to front, the element's data-index field is never syncronized, even though the underlying collection's indices have changed. So maybe use cID instead, so that that never falls out of sync.





// SATURDAY:
// A fetch causes an add event for each note, which means their indices are set before checking sort index.
// Instead we need to have a custom event called 'changedOrder' that fires updateIndices
// and then manually sort() after fetch completes.


// collection sync doesn't do anything because
// they don't have sort order; they are resorted by the cID (or similar)
// every time it fetches. Therefore we'd need a seperate index
// (not @index, maybe sortIndex?) to replace data-index and pre-sort
// the collection by that on fetch.

// However...
// Even if that all worked, bringToFront is ugly because it re-renders
// twice in order to match that state, which "lets go" of whatever mouse 
// stuff you're doing, and the click event (may) block any other click events
// from occurring. So even if we manually call 'bringToFront' when various
// parts of a note are clicked, it would still lose the mouse context from before.
// E.g., when you grab the handle, it would render and you'd let go, like when
// John Locke fell down the well during the time jump.

// But if we ignored the handle and just said click/mousedown on ever
// other part of the note: we could bring this model to the end of the list,
// shift everything with higher sortIndex down by 1, set its sortIndex
// to collection.models.length - 1, and sync with the datastore.
// For adding notes, just assign it new length - 1.
// For removing notes, do exactly what you did for bring to front, except don't
// add the removed element to the front. So if you can get add + remove working,
// bring to front just slightly modifies remove. BUT you might just want a
// function that shifts a note up by one space, so who knows.

Possible options for adding/sorting:

  1.) No matter how/where the person adds a model, the collection re-sorts based on the sort index. This means we can use add, unshift, push, or add(at), and it will be ignored. Instead, it will add it as usual, but then re-sort. For new notes w/ -1 sort index, they are assigned an index, then it sorts.

    Client impact: Seperate add operations lose meaning. Performance drop.

  2.) Only use add(sortIndex) for models with sort indeces, thus never necessitating a sort except on initialization. For new models, add will add to the end, and sort index is still assigned, same as option 1. This means we can use add, unshift, push etc, but their state will be lost on reload. Don't need to sort at all (except on init), because we can just make sortIndex mimic the collection index, since that's always correct until page reload. Having this attribute simply allows preservation. Maybe that's what I should do.

    Client impact: Must make conscious effort to only use add(at: sortIndex). Other operation states are lost on reload. Performance increase.

  Considerations:
    Collection index is determined by when they were created, more or less. We need a seperate attribute called sortIndex to preserve the user-created state of the collection. We can re-order the collection in a single session and the collection indeces change, and can re-render all we want, but they are not preserved on reload. Sync does not save the order of the collection, only the attributes of the models.

    Therefore, sortIndex is an additional property that can be preserved at all times. To the client, it will look like the sort index always matches the collection index. However, what's happening is that the collection index is being made to realign with the sort index after add/remove operations.

    In both options, we need to shift up or down when we insert, so the sort index matches the collection index.
    To synchronize: on add/delete, set the sort index to the model's current position in the array. That way, the mechanism is the same for add and remove.




// the array-less define call makes it so you can require stuff.
// if you put in an array and put require as a dep, it get's screwy.
define(function(require){
  var Backbone = require('backbone'),
    literallyAnything = require('handlebars');
});

// example main.js
// jquery does not be to individually loaded. You can simply use $
requirejs.config({
  baseUrl: '../app',
  paths: {
    require: 'lib/require',
    jquery: 'lib/jquery',
    underscore: 'lib/underscore',
    backbone: 'lib/backbone',
    handlebars: 'lib/handlebars',
    bootstrap: 'lib/bootstrap'
  },
  shim: {
    'handlebars': {
      'exports': 'Handlebars'
    },
    'bootstrap': {
      deps: ['jquery']
    }
  }
});

require(['bt-app']);



// Bootstrap in a few notes (bt-app.js)

var note1 = new NoteModel({
  x: 100,
  y: 100,
  width: 300,
  height: 200,
  color: 'crimson',
  content: 'The first note'
});
var note2 = new NoteModel({
  x: 500,
  y: 100,
  width: 200,
  height: 300,
  color: 'skyblue',
  content: 'The second note'
});

notesCollection.add([
  note1,
  note2
]);

notesCollection.sync('create', note1, {success: function(){console.log('success')}});
notesCollection.sync('create', note2, {success: function(){console.log('success')}});

/*
  All 3 of these do slightly different things:
*/

//1 -> triggers a destroy event
noteModel.destroy({
  success: function() {
    console.log('destroyed model');
  },
  failure: function() {
    console.log('failed to destroy model');
  }
})

//2 -> doesn't destroy it
this.collection.remove(noteModel);

//3 -> deletes, but doesn't cause event. basically, manually calling stuff done in destroy()
self.collection.sync('update', noteModel, {
  success: function(){
    console.log('saved position');
  },
  failure: function(){
    console.log('failed to save position');
  }
});